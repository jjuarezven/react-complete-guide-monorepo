Puntos importantes:
    Notar que el componente Card esta recibiendo el className usando props y que estamos combinando este className con el que se definió
    internamente en el componente:

    <div className={`${style.card} ${props.className}`}>{props.children}</div>

    Además ver el uso de {props.children}, que es el contenido que esta declarado dentro de Card en el compoente AddUser:

    <Card className={style.input}>
      <form onSubmit={addUserHandler}>
        <label htmlFor="username">User name</label>
        <input id="username" type="text" />
        <label htmlFor="age">Age (years)</label>
        <input id="age" type="number" />
        <button type="submit">Add user</button>
      </form>
    </Card>

    El mismo principio de {props.children} es usado en el componente Button:

    <button
      className={style.button}
      type={props.type || "button"}
      onClick={props.onClick}
    >
      {props.children}
    </button>


    PORTAL:
    React v16.0 brought a concept of Portal that provides a way to transport a piece of UI into some other locations on to the 
    DOM Tree ( even outside the parent hierarchy ). You put your component at one place. After rendering, It appears
    to be somewhere else on the Actual DOM.

    What is the use ?
    Creating Modals / TootTips. ( Especially when the modal or the tooltip would break out of the parent div )

    What’s Special ?
    The teleport ( or the transfer ) actually happens in the Actual DOM tree not the React Tree. React Tree will still hold the 
    Modal where you rendered it.
    *Important : This means even though a portal can be anywhere in the Actual DOM tree, it behaves like a normal React 
    child in every other way. Features like context and this work exactly the same regardless of whether the child is a portal, 
    as the Modal and its children still exist in the React Virtual DOM tree regardless of it’s position in the Actual DOM tree.
    This includes event bubbling. An event fired from inside a portal will propagate to ancestors in the containing React tree, 
    even if those elements are not ancestors in the ActualDOM tree.

    useRef:
    You can acces directly any DOM component by using useRef, it is ok to do it when reading values, fot other cases let React to
    manage access to DOM instead.